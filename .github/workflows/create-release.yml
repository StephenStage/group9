name: Package Java Project

on:
  workflow_run:
    workflows: ["Java CI with Maven"]
    types:
      - completed

permissions:
  contents: write

jobs:
  package:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}

    steps:
      # Step 1: Check out the repository
      - uses: actions/checkout@v4

      # Step 2: Set up JDK 21
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      # Step 3: Build the project with Maven
      - name: Package Application
        run: mvn -B clean package

      # Step 4: List target directory contents to check if JAR is generated
      - name: List target directory contents
        run: ls -la target

      # Step 5: Extract Version from pom.xml (without removing -SNAPSHOT)
      - name: Extract Version from pom.xml
        id: extract_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout | grep -Ev '(^\[|Download\w+:)')
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # Step 6: Check if the release already exists and get the release ID
      - name: Check if release exists
        id: check_release
        run: |
          RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/v${{ env.VERSION }} \
            | jq -r '.id // empty')
          if [ -n "$RELEASE_ID" ]; then
            echo "RELEASE_EXISTS=true" >> $GITHUB_ENV
            echo "RELEASE_ID=$RELEASE_ID" >> $GITHUB_ENV
          else
            echo "RELEASE_EXISTS=false" >> $GITHUB_ENV
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 7: Conditionally update the release if it exists, or create a new one
      - name: Update or Create Release
        if: ${{ env.RELEASE_EXISTS == 'true' }}
        run: |
          curl -X PATCH -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"tag_name": "v'${{ env.VERSION }}'", "name": "Release v'${{ env.VERSION }}'", "draft": false, "prerelease": false}' \
            https://api.github.com/repos/${{ github.repository }}/releases/${{ env.RELEASE_ID }}

      - name: Create GitHub Release
        if: ${{ env.RELEASE_EXISTS == 'false' }}
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: "v${{ env.VERSION }}"  # Use the extracted version for the tag, including -SNAPSHOT
          release_name: "Release v${{ env.VERSION }}"  # Name the release based on the version, including -SNAPSHOT
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 8: Find the JAR file dynamically
      - name: Find JAR File
        id: find_jar
        run: |
          JAR_PATH=$(find target -name "*.jar" | head -n 1)
          echo "Found JAR at: $JAR_PATH"
          echo "JAR_PATH=$JAR_PATH" >> $GITHUB_ENV

      # Step 9: Set the correct upload URL based on whether the release was updated or created
      - name: Set Upload URL
        run: |
          if [ "${{ env.RELEASE_EXISTS }}" == "true" ]; then
            echo "UPLOAD_URL=https://uploads.github.com/repos/${{ github.repository }}/releases/${{ env.RELEASE_ID }}/assets?name=d2l-mock-${{ env.VERSION }}.jar" >> $GITHUB_ENV
          else
            echo "UPLOAD_URL=${{ steps.create_release.outputs.upload_url }}" >> $GITHUB_ENV
          fi

      # Step 10: Upload the JAR file to the release (new or updated)
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ env.UPLOAD_URL }}  # Use the correct upload URL
          asset_path: ${{ env.JAR_PATH }}  # Use the dynamically found JAR file
          asset_name: d2l-mock-${{ env.VERSION }}.jar  # Name the asset based on the version
          asset_content_type: application/java-archive
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
